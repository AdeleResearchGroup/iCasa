/*
 *  Copyright 2010-2011 Universit√© Joseph Fourier
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  
 *    http://www.apache.org/licenses/LICENSE-2.0
 *  
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
options
{
  JDK_VERSION = "1.6";
  //DEBUG_PARSER = true;
  ERROR_REPORTING = true;
  //DEBUG_LOOKAHEAD = true;
  //DEBUG_TOKEN_MANAGER = true;
  
  static = false;
}

PARSER_BEGIN(IcasaScript)
package fr.liglab.adele.icasa.script.impl.parser;
import java.io.InputStream;
import java.util.List;
import java.util.LinkedList;
import java.util.Map;
import java.util.HashMap;
import java.util.Collections;
import java.util.Map.Entry;
import java.util.AbstractMap.SimpleEntry;
import org.apache.felix.ipojo.ComponentInstance;
import fr.liglab.adele.icasa.script.Script;
import fr.liglab.adele.icasa.script.impl.InterpreterImpl;
import fr.liglab.adele.icasa.script.impl.model.EnvironmentModel;
import fr.liglab.adele.icasa.script.impl.model.DeviceModel;

public class IcasaScript implements Script
{
  private InterpreterImpl m_interpreter;

  private List < EnvironmentModel > m_environments;

  private Map < String, ComponentInstance > m_instances = new HashMap < String, ComponentInstance > ();

  private boolean m_isStarted;

  public IcasaScript(InterpreterImpl interpreter, InputStream in) throws ParseException
  {
    this (in);
    m_interpreter = interpreter;
    m_environments = EnvironmentList();
  }
  @ Override public synchronized boolean isStarted()
  {
    return m_isStarted;
  }
  @ Override public synchronized void start() throws Exception
  {
    if (!m_isStarted)
    {
      m_interpreter.start(this);
      m_isStarted = true;
    }
  }
  @ Override public synchronized void stop() throws Exception
  {
    if (m_isStarted)
    {
      m_interpreter.stop(this);
      m_isStarted = false;
    }
  }

  public List < EnvironmentModel > getDeclaredEnvironments() throws Exception
  {
    return m_environments;
  }

  public Map < String, ComponentInstance > getInstances() throws Exception
  {
    return m_instances;
  }
}

PARSER_END(IcasaScript)

// Skip spaces, tabs, line breaks and carriage returns
SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

// The base tokens : strings decimal and integer numbers
TOKEN :
{
  < NULL : "null" >
| < STRING : "\"" (~[ "\"" ])* "\"" >
| < NUMBER :
    ("-")? ([ "0"-"9" ])+
    (
      "." ([ "0"-"9" ])+
    )?
  | "NaN"
  | "Infinity"
  | "-Infinity" >
}

// The keywords
TOKEN :
{
  < ENVIRONMENT : "environment" >
| < DESCRIPTION : "description" >
| < DEVICE : "device" >
| < POSITION : "position" >
}

/**
Parse a number or null, and return its value */
Double NumberOrNull() :
{}
{
  < NULL >
  {
    return null;
  }
|
  {
    Token t;
  }
  t = < NUMBER >
  {
    return Double.parseDouble(t.image);
  }
}

/**
* Parse an integer
*/
int IntegerNumber() :
{}
{
  {
    Token t;
  }
  t = < NUMBER >
  {
    return (int) Double.parseDouble(t.image);
  }}


/**
* Parse a quoted string and return its value without the enclosing quotes.
*/
String QuotedString() :
{
  Token t;
}
{
  t = < STRING >
  {
    // Remove the enclosing quotes
    return t.image.substring(1, t.image.length() - 1);
  }
}

/**
* Parse a quoted string or null return its value without the enclosing quotes, or null.
*/
String QuotedStringOrNull() :
{}
{
  < NULL >
  {
    return null;
  }
|
  {
    String s;
  }
  s = QuotedString()
  {
    return s;
  }
}

/**
* Parse the declaration of an environment property
*/
Entry < String, Double > EnvironmentProperty() :
{
  String key;
  Double value;
}
{
  key = QuotedString() "=" value = NumberOrNull()
  {
    return new SimpleEntry < String, Double > (key, value);
  }
}

/**
* Parse the declaration of a device configuration property
*/
Entry < String, String > DeviceProperty() :
{
  String key;
  String value;
}
{
  key = QuotedString() "=" value = QuotedStringOrNull()
  {
    return new SimpleEntry < String, String > (key, value);
  }
}

/**
 * TODO
 */
Map < String, Double > EnvironmentPropertyMap() :
{
  final Map < String, Double > properties = new HashMap < String, Double > ();
  Entry < String, Double > entry;
}
{
  (
    entry = EnvironmentProperty()
    {
      properties.put(entry.getKey(), entry.getValue());
    }
  )*
  {
    return properties;
  }
}

/**
 * TODO
 */
Map < String, String > DevicePropertyMap() :
{
  final Map < String, String > properties = new HashMap < String, String > ();
  Entry < String, String > entry;
}
{
  (
    entry = DeviceProperty()
    {
      properties.put(entry.getKey(), entry.getValue());
    }
  )*
  {
    return properties;
  }
}

/**
* Parse the declaration of an environment property
*/
DeviceModel Device() :
{}
{
  < DEVICE >
  {
    final String id;
  }
  id = QuotedString() ":"
  {
    final String ipojoFactory;
  }
  ipojoFactory = QuotedString()
  "{"
  {
    int positionX = -1;
    int positionY = -1;
  }
  (
    < POSITION > "=" positionX = IntegerNumber() positionY = IntegerNumber()
  )?
  {
    final Map < String, String > properties;
  }
  properties = DevicePropertyMap() "}"
  {
    return new DeviceModel(id, ipojoFactory, properties, positionX, positionY);
  }
}

/**
* TODO
*/
List < DeviceModel > DeviceList() :
{
  final List < DeviceModel > devices = new LinkedList < DeviceModel > ();
  DeviceModel device;
}
{
  (
    device = Device()
    {
      devices.add(device);
    }
  )*
  {
    return devices;
  }
}

/**
* Parse the description of an environment
*/
EnvironmentModel Environment() :
{}
{
  < ENVIRONMENT >
  {
    String id;
  }
  id = QuotedString() "{"
  {
    String description = null;
  }
  (
    < DESCRIPTION > description = QuotedString()
  )?
  {
    int topLeftX = -1;
    int topLeftY = -1;
    int bottomRightX = -1;
    int bottomRightY = -1;
  }
  (
    < POSITION > "=" topLeftX = IntegerNumber() topLeftY = IntegerNumber() bottomRightX = IntegerNumber() bottomRightY = IntegerNumber()
  )?
  {
    final Map < String, Double > properties;

    final List < DeviceModel > devices;
  }
  properties = EnvironmentPropertyMap() devices = DeviceList() "}"
  {
    return new EnvironmentModel(id, description, properties, devices, topLeftX, topLeftY, bottomRightX, bottomRightY);
  }
}

/**
* Parse a sequence of environments
*/
List < EnvironmentModel > EnvironmentList() :
{
  List < EnvironmentModel > list = new LinkedList < EnvironmentModel > ();
  EnvironmentModel env;
}
{
  (
    env = Environment()
    {
      list.add(env);
    }
  )*
  {
    return Collections.unmodifiableList(list);
  }
}
